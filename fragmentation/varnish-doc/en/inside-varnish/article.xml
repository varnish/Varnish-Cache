<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../../share/docbook-xml.css"?>
<!DOCTYPE article
 PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
 "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article lang="en">
  <articleinfo>
    <releaseinfo role="cvs">$Id$</releaseinfo>
    <title>Inside the Varnish HTTP Accelerator</title>
  </articleinfo>

  <section>
    <title>Repository organization</title>

    <para>The Varnish SVN repository is organized as follows:</para>

    <variablelist>
      <varlistentry>
	<term><filename>branches</filename></term>
	<listitem>
	  <para>Branches of the main source tree, mainly for release
	  engineering purposes.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><filename>tags</filename></term>
	<listitem>
	  <para>Static copies of past releases.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><filename>trunk</filename></term>
	<listitem>
	  <para>This is where active development takes place.  Code
	  is merged from here to a branch prior to a release.</para>
	  <variablelist>
	    <varlistentry>
	      <term><filename>varnish-cache</filename></term>
	      <listitem>
		<para>Varnish itself, with its accompanying tools,
		code libraries and man pages.</para>
		<variablelist>
		  <varlistentry>
		    <term><filename>bin</filename></term>
		    <listitem>
		      <para>Programs, including Varnish itself.</para>
		      <variablelist>
			<varlistentry>
			  <term><filename>varnishadm</filename></term>
			  <listitem>
			    <para>A command-line interface to the
			    management port.</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><filename>varnishd</filename></term>
			  <listitem>
			    <para>The Varnish HTTP accelerator
			    itself.</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><filename>varnishhist</filename></term>
			  <listitem>
			    <para>A tool that displays a histogram
			    of requests grouped by processing time,
			    using different symbols for hits and
			    misses.</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><filename>varnishlog</filename></term>
			  <listitem>
			    <para>An all-purpose log-watching and
			    log-saving tool.  Mostly used to store
			    log data for later processing by the
			    other log-watching tools.</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><filename>varnishncsa</filename></term>
			  <listitem>
			    <para>A log-watching tool that displays
			    log data in the Apache / NCSA combined
			    log format, suitable for further
			    processing by standard log analysis
			    tools such as AWStats.</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><filename>varnishreplay</filename></term>
			  <listitem>
			    <para>A tool that reads Varnish log data
			    and attempts to recreate the HTTP
			    traffic that resulted in said data;
			    useful for debugging and
			    benchmarking.</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><filename>varnishstat</filename></term>
			  <listitem>
			    <para>A tool that displays statistics
			    from a running Varnish server.</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><filename>varnishtop</filename></term>
			  <listitem>
			    <para>A tool that reads Varnish log data
			    and displays an ordered list of the most
			    frequently reoccurring log
			    entries.</para>
			  </listitem>
			</varlistentry>
		      </variablelist>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><filename>include</filename></term>
		    <listitem>
		      <para>Header files for the code libraries.</para>
		      <variablelist>
			<varlistentry>
			  <term><filename>compat</filename></term>
			  <listitem>
			    <para>Header files for <filename>libcompat</filename>.</para>
			  </listitem>
			</varlistentry>
		      </variablelist>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><filename>lib</filename></term>
		    <listitem>
		      <para>Code libraries.</para>
		      <variablelist>
			<varlistentry>
			  <term><filename>libcompat</filename></term>
			  <listitem>
			    <para>Compatibility library which
			    implements a number of functions (such
			    as <function>strlcpy</function> and
			    <function>vasprintf</function>) which
			    are present on some but not all of the
			    platforms Varnish runs on.</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><filename>libvarnish</filename></term>
			  <listitem>
			    <para>Utility library which implements a
			    number of non-Varnish-specific functions
			    (including a CRC32 implementation and a
			    generic binary heap implementation)
			    which are used both by Varnish and some
			    of the accompanying tools.</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><filename>libvarnishapi</filename></term>
			  <listitem>
			    <para>Interface library, not used by
			    Varnish itself, but used by applications
			    which need to interface with
			    Varnish.</para>
			  </listitem>
			</varlistentry>
			<varlistentry>
			  <term><filename>libvcl</filename></term>
			  <listitem>
			    <para>VCL to C translator.</para>
			  </listitem>
			</varlistentry>
		      </variablelist>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><filename>man</filename></term>
		    <listitem>
		      <para>Additional man pages.</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><filename>varnish-doc</filename></term>
	      <listitem>
		<para>The Varnish documentation, except man pages,
		which are kept alongside the source code.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><filename>varnish-tools</filename></term>
	      <listitem>
		<para>Various development and testing tools.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section>
    <title>The accelerator</title>

    <section>
      <title>Principles of operation</title>

      <para>Lorem ipsum dolor sit amet</para>
    </section>

    <section>
      <title>Subsystems</title>

      <section>
	<title>The management interface</title>

	<para>The management interface allows a person or process to
	control certain aspects of the accelerator while it is
	running, such as inspecting and setting run-time parameters,
	starting and stopping the child process, and purging
	objects.</para>

	<para>The commands accepted by the management interface fall
	in two categories: management commands and child commands.
	The former are handled by the management (parent) process,
	while the latter are passed unmodified to the child process
	and handled there.</para>

	<para>The management interface uses an extremely simple
	text-based protocol described below.</para>

	<para>The user sends a single line of text consisting of one
	or more words separated by linear whitespace, terminated by a
	newline character.  Words which contain linear whitespace must
	be placed in double quotes; newline characters must be sent as
	<literal>\n</literal>, backslash characters as
	<literal>\\</literal> and double quote characters as
	<literal>\"</literal>.</para>

	<para>The first word sent by the client is the command name,
	and subsequent words are command arguments.</para>

	<para>The management process responds with a line consisting
	of a three-digit status code, linear whitespace, a byte count,
	and a newline character.  If the byte count is non-zero, this
	line is followed by that many bytes of additional data, plus a
	newline character.</para>

	<para>Status code 200 indicates success; all other codes
	indicate some kind of failure.  Status codes between 100 and
	199 indicate a syntax error, an unknown command, or issues
	with the number or nature of the arguments.  Status codes
	between 300 and 399 indicate a failure to carry out the
	requested operation.  The status code 400 indicates a
	communications error.</para>
      </section>

      <section>
	<title>The shared memory log</title>

	<!--
The ReqEnd record in the shared memory log has the following fields:
{{{
 2039158367 1158180241.888800123 1158180241.888854881 0.005646787 0.000015924 0.000038834
 XID        Request timestamp    Complete timestamp   Idle time   proc.time   xmit time
}}}

XID is the transaction ID.  If no request was received it will be zero.

Request timestamp is the time when we have received a complete request.

Complete timestamp is when Varnish is done with the request.  This does *not* signify when the last byte has been transmitted to the client.  The last X kilobytes are still likely to be buffered in the kernel and on the way out.

Idle time is the duration from when the connection was established or the previous request on it was completed.  In other words: the inter-request interval.

Proc time is how long Varnish took to prepare the reply

Xmit time is how long it took Varnish to deliver the reply.  See above about kernel buffering.

Request timestamp + proc time + xmit time = Complete timestamp.
	-->
	<para>Lorem ipsum dolor sit amet</para>
      </section>
    </section>

    <section>
      <title>Data structures</title>

      <para>Lorem ipsum dolor sit amet</para>
    </section>
  </section>

  <section>
    <title>The log tailers</title>

    <section>
      <title>varnishlog</title>

      <para>Lorem ipsum dolor sit amet</para>
    </section>

    <section>
      <title>varnishncsa</title>

      <para>Lorem ipsum dolor sit amet</para>
    </section>
  </section>

  <section>
    <title>The statistics gatherers</title>

    <section>
      <title>varnishstat</title>

      <para>Lorem ipsum dolor sit amet</para>
    </section>

    <section>
      <title>varnishhist</title>

      <para>Lorem ipsum dolor sit amet</para>
    </section>

    <section>
      <title>varnishtop</title>

      <para>Lorem ipsum dolor sit amet</para>
    </section>
  </section>

  <section>
    <title>The test framework</title>

    <para>The test framework for Varnish consists of a library of Perl
    modules organized under <filename>Varnish::Test</filename>. The
    framework works by starting up a Varnish daemon process and
    communicating with it while acting as both client and server. The
    framework also operates the management command-line interface of
    the Varnish daemon. This enables the framework to monitor all
    external aspects of the daemon's behavior.</para>

    <para>The test framework contains a set of test-cases, each one
    being a Perl module organized under
    <filename>Varnish::Test::Case</filename>. The test-cases are run
    sequentially, and each one typically focuses on a specific element
    of Varnish's behavior or functionality. If the expectations of a
    test-case is not fulfilled by the daemon being tested, the
    test-case fails. Only when all test-cases succeeds, the Varnish
    daemon may be considered healthy.</para>

    <para>Test-case development is an ongoing process, and anyone is
    welcome to contribute test-cases which reveals erroneous behavior
    in at least one revision of Varnish.</para>

    <section>
      <title>I/O-handling</title>

      <para>The test framework is based on a single
      <filename>select(2)</filename>-driven loop, where all relevant
      I/O channels are monitored. Activity on the I/O channels is
      handled in an event-driven way, so the select loop also works as
      an event loop. I/O-events are dispatched and optionally handled
      by the running test-case which then decides what to do next. The
      event loop may be paused, in order to drive the test processing
      flow forward.</para>
    </section>

    <section>
      <title>Object structure</title>

      <para>The test framework employs an object-oriented approach and
      uses (Perl) objects to represent instances of servers
      (<filename>Varnish::Test::Server</filename>), clients
      (<filename>Varnish::Test::Client</filename>), and HTTP messages
      (<filename>HTTP::Message</filename>).</para>

      <para>Also, the Varnish daemon is represented by an object
      (<filename>Varnish::Test::Varnish</filename>) taking care of the
      daemon process which is spawned by the test framework process
      before the tests start.</para>

      <para>Additionally, each test-case is represented by its own
      object derived from the super-class
      <filename>Varnish::Test::Case</filename>.</para>

      <para>In the center of all the objects stands the engine object
      (<filename>Varnish::Test::Engine</filename>) which coordinates
      the communication between the other objects by dispatching and
      queuing events. The engine also sets up the
      <filename>select(2)</filename>-loop, using an object instance of
      the CPAN module <filename>IO::Multiplex</filename>.</para>
    </section>

    <section>
      <title>Further information</title>

      <para>Consult the POD-based in-source documentation for more
      details if you like to get involved in developing test-cases or
      improving the framework in general. In that case, prior
      experience with Perl as well as a general understanding of
      network programming using <filename>select(2)</filename>, is
      beneficial.</para>
    </section>
  </section>

  <section>
    <title>Plugins</title>

    <para>The <filename>trunk/varnish-tools/</filename> directory in
    the Varnish repository contains Varnish plugins for several
    popular system monitoring and administration frameworks.</para>

    <section>
      <title>Munin</title>

      <para>Munin, named for one of the two ravens that in Norse
      tradition sit on the shoulders of Odin, father of the gods, is a
      monitoring and graphing tool built on top of Tobi Oetiker's
      RRDtool and maintained largely by Linpro.</para>

      <para>The Varnish Munin plugin is written in Perl and resides in
      <filename>trunk/varnish-tools/munin/</filename>.  It can report
      on any statistic (called <emphasis>aspects</emphasis>) stored in
      the shared memory log, and can easily be extended to also report
      values computed from these statistics (<emphasis>derived
      aspects</emphasis>).</para>

      <para>When run, the plugin first invokes
      <command>varnishstat</command>.  Using the first column as keys,
      it registers each available statistic in the
      <varname>%ASPECTS</varname> hash, and stores their values in the
      <varname>%varnishstat</varname> hash.  It then verifies that the
      requested aspect matches one of the items in
      <varname>%ASPECTS</varname>, i.e. one of the statistics reported
      by <command>varnishstat</command> or a predefined derived
      aspect.  Finally, it either looks up or computes the requested
      value, and prints it to <varname>stdout</varname> in the format
      expected by Munin.</para>

      <para>Aspects are of one of three types:
      <literal>count</literal> (a monotonically increasing counter),
      <literal>gauge</literal> (an instantaneous measurement) and
      <literal>percent</literal> (a fraction expressed as a
      percentage).  The first two are used for automatically created
      aspects (i.e. everything <command>varnishstat</command>
      reports), while the third is used only for predefined derived
      aspects.</para>

      <para>A <literal>count</literal> or <literal>gauge</literal>
      aspect has a <literal>value</literal> which is either a key in
      <varname>%varnishstat</varname> or a reference to an array
      representing an expression; the first element of the array is an
      arithmetic operator, and subsequent elements are the terms
      (which can themselves be references to expression
      arrays).</para>

      <para>A <literal>percent</literal> aspect has one or more
      values; if it has more than one, Munin will stack them.  Each
      value has a <literal>numerator</literal> and a
      <literal>denominator</literal>, each of which is, as above,
      either a key in <varname>%varnishstat</varname> or an
      expression.</para>

      <para>When adding or modifying derived aspects, care should be
      taken not to create unnecessary inconsistencies between this
      plugin and the Nagios plugin described in the next
      section.</para>
    </section>

    <section>
      <title>Nagios</title>

      <para>Nagios is a web-based host and network monitoring tool.
      The major difference between Nagios and Munin is that while
      Munin records statistics and creates graphs, Nagios primarily
      wants to know whether a particular part of the system has failed
      or is about to fail.</para>

      <para>The Varnish Nagios plugin is written in C and resides in
      <filename>trunk/varnish-tools/nagios/</filename>.  It can report
      any statistic stored in the shared memory log.  It can also
      fairly easily be extended to report computed statistics.</para>

      <!-- XXX more -->

      <para>When adding or modifying parameters, care should be taken
      not to create unnecessary inconsistencies between this plugin
      and the Munin plugin described in the previous section.</para>
    </section>

    <section>
      <title>Webmin</title>

      <para>Webmin is a web-based system configuration and
      administration tool for Unix-like systems.</para>

      <para>The Varnish Webmin plugin is written in Perl and resides
      in <filename>trunk/varnish-tools/webmin/</filename>.  It can
      perform all of the functions that are available through the
      management process's command-line interface.</para>

      <!-- XXX more -->
    </section>
  </section>

  <section>
    <title>Other tools</title>

    <section>
      <title>varnishadm</title>

      <para>Lorem ipsum dolor sit amet</para>
    </section>

    <section>
      <title>varnishreplay</title>

      <para>Lorem ipsum dolor sit amet</para>
    </section>

    <section>
      <title>fetcher</title>

      <para>Lorem ipsum dolor sit amet</para>
    </section>
  </section>
</article>
