varnishtest "VCL compiler coverage test: vcc_parse.c & vcc_expr.c"

varnish v1 -cliok "param.set vcc_allow_inline_c true" -vcl {
	backend b { .host = "127.0.0.1"; }
	C{
	#include <stdio.h>
	}C
}

varnish v1 -errvcl {Found: '0' at} { 0; }

# The next test issues a quite confusing error message:
#   Expected an action, 'if', '{' or '}'\n
#   ('Default' Line 42 Pos 1)\n
#   sub vcl_recv {\n
#   ###-----------\n
#   \n
# It's actually complaining about the first token in
# the default.vcl which is appended after the proffered
# VCLs tokenstream.
# XXX: A better error message would be desirable

varnish v1 -errvcl {Expected an action, 'if', } " sub vcl_recv { { } { "

varnish v1 -vcl {
	backend b { .host = "127.0.0.1"; }
	sub vcl_backend_response {
		set beresp.ttl = 1w;
		set beresp.ttl *= 1.5;
		set beresp.ttl = 1.5 s * 2.5;
		set beresp.ttl = 1.5 s / 2.5;
		set beresp.ttl = 1.5h + 1.5s;
		set beresp.ttl = 1.5h - 1.5s;
	}
}

varnish v1 -errvcl {Comparison of different types: INT '!=' STRING} {
	sub vcl_recv {
		if (!req.restarts != req.url) {
			set req.http.foo = "foo";
		}

	}
}

varnish v1 -errvcl {Symbol not found: 'vcl_recv' (expected type STRING_LIST)} {
	sub vcl_recv {
		set req.http.foo = vcl_recv;
	}
}

# XXX: not obvious if this actually fails for the desired reason ?
varnish v1 -errvcl {Unknown token '-' when looking for DURATION} {
	sub vcl_recv {
		if (req.ttl < -3s || req.ttl) {
			set req.http.foo = vcl_recv;
		}
	}
}

varnish v1 -errvcl {'&&' must be followed by BOOL, found DURATION.} {
	sub vcl_recv {
		if (req.ttl < 3s && req.ttl) {
			set req.http.foo = vcl_recv;
		}
	}
}

varnish v1 -errvcl {Operator * not possible on type STRING.} {
	sub vcl_recv {
		set req.http.foo = "bla" * "foo";
	}
}

varnish v1 -errvcl {DURATION + INT not possible.} {
	sub vcl_backend_response {
		set req.ttl = req.ttl + beresp.status;
	}
}

varnish v1 -errvcl {'!' must be followed by BOOL, found DURATION.} {
	sub vcl_backend_response {
		if (! req.ttl) {
		}
	}
}

varnish v1 -errvcl {BOOL + BOOL not possible.} {
	sub vcl_backend_response {
		if (beresp.do_gzip + beresp.do_gunzip) {
		}
	}
}

varnish v1 -vcl {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = "foo" + "bar";
		set req.http.foo = "foo" + 1;
		set req.http.foo = "foo" + 1.5;
		set req.http.foo = "foo" + now;

		set req.http.foo = now + 1s;
		set req.http.foo = now - 1s;
		set req.http.foo = now - now;

		set req.http.foo = 1 + 1;
		set req.http.foo = 1 - 1;

		set req.ttl = 1s;
	}
}

# XXX: not the most clear error message
varnish v1 -errvcl {STRING - STRING not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = "foo" - "bar";
	}
}

varnish v1 -errvcl {TIME + STRING not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.ttl = now + "foo";
	}
}

varnish v1 -errvcl {TIME + TIME not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.ttl = now + now;
	}
}

# XXX: error message should say something about DURATION
varnish v1 -errvcl {Expected ID got ';'} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = now + 1;
	}
}

varnish v1 -errvcl {INT + STRING not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_backend_response {
		set beresp.status = 1 + "foo";
	}
}

varnish v1 -errvcl {INT + TIME not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_backend_response {
		set beresp.status = 1 + now;
	}
}

# XXX: error message should spot DURATION
varnish v1 -errvcl {Expected ';' got 's'} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = 1 + 1s;
	}
}

# XXX: should spot DURATION
varnish v1 -errvcl {Expected ';' got 's'} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = 1s;
	}
}

# XXX: should spot DURATION
varnish v1 -errvcl {Expected ';' got 's'} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = 1s + 1;
	}
}

# XXX: should spot DURATION
varnish v1 -errvcl {Expected ';' got 's'} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = 1s + now;
	}
}

# XXX: should spot DURATION
varnish v1 -errvcl {Expected ';' got 's'} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = 1s + "foo";
	}
}

# XXX: should spot DURATION
varnish v1 -errvcl {Expected ';' got 's'} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.http.foo = "foo" + 1s;
	}
}

# XXX: should spot DURATION
varnish v1 -errvcl {Expected ID got ';'} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.ttl = 1s + 1;
	}
}

varnish v1 -errvcl {DURATION + TIME not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.ttl = 1s + now;
	}
}

varnish v1 -errvcl {DURATION + STRING not possible.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_recv {
		set req.ttl = 1s + "foo";
	}
}

varnish v1 -errvcl {'||' must be followed by BOOL, found DURATION.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_backend_response {
		if (req.url || beresp.ttl) {
		}
	}
}

varnish v1 -errvcl {'&&' must be followed by BOOL, found DURATION.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_backend_response {
		if (req.url && beresp.ttl) {
		}
	}
}

varnish v1 -vcl {
	backend b { .host = "127.0.0.1"; }
	sub vcl_miss {
		if (!req.url) {
		}
	}
}

varnish v1 -errvcl {Names of VCL sub's cannot contain '-'} {
	backend b { .host = "127.0.0.1"; }
	sub foo-bar {
	}
	sub vcl_recv {
		call foo-bar;
	}
}

varnish v1 -errvcl {VCL sub's named 'vcl*' are reserved names.} {
	backend b { .host = "127.0.0.1"; }
	sub vcl_bar {
	}
	sub vcl_recv {
		call vcl_bar;
	}
}

varnish v1 -errvcl {Names of VCL acl's cannot contain '-'} {
	backend b { .host = "127.0.0.1"; }
	acl foo-bar {
	}
	sub vcl_recv {
		if (client.ip ~ foo.bar) {
		}
	}
}
